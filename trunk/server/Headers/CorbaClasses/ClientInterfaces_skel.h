// **********************************************************************
//
// Generated by the ORBacus IDL-to-C++ Translator
//
// Copyright (c) 2005
// IONA Technologies, Inc.
// Waltham, MA, USA
//
// All Rights Reserved
//
// **********************************************************************
// Version: 4.3.3

///
/// @author	Mateusz Ko³odziejczyk
/// @date	06.01.2009
///
/// @brief	Wygenerowany na podstawie pliku IDLa
///

#ifndef ___ClientInterfaces_skel_h__
#define ___ClientInterfaces_skel_h__

#include <ClientInterfaces.h>


#ifndef OB_INTEGER_VERSION
#   error No ORBacus version defined! Is <OB/CORBA.h> included?
#endif

#ifndef OB_NO_VERSION_CHECK
#   if (OB_INTEGER_VERSION != 4030300L)
#       error ORBacus version mismatch!
#   endif
#endif

//
// IDL:DomainData:1.0
//
namespace POA_DomainData
{

} // End of namespace POA_DomainData

//
// IDL:ClientInterfaces:1.0
//
namespace POA_ClientInterfaces
{

//
// IDL:ClientInterfaces/IClientServer:1.0
//
class IClientServer : virtual public PortableServer::ServantBase
{
    IClientServer(const IClientServer&);
    void operator=(const IClientServer&);

protected:

    //
    // IDL:ClientInterfaces/IClientServer/ReceiveMessage:1.0
    //
    void _OB_op_ReceiveMessage(OB::Upcall_ptr);

    //
    // IDL:ClientInterfaces/IClientServer/ChangeServer:1.0
    //
    void _OB_op_ChangeServer(OB::Upcall_ptr);

    //
    // IDL:ClientInterfaces/IClientServer/CreatePipeRequest:1.0
    //
    void _OB_op_CreatePipeRequest(OB::Upcall_ptr);

public:

    IClientServer() { }

    virtual ::CORBA::Boolean _is_a(const char*)
        throw(::CORBA::SystemException);

    virtual ::CORBA::RepositoryId _primary_interface(
        const PortableServer::ObjectId&,
        PortableServer::POA_ptr);

    ClientInterfaces::IClientServer_ptr _this();

    virtual OB::DirectStubImpl_ptr _OB_createDirectStubImpl(
        PortableServer::POA_ptr,
        const PortableServer::ObjectId&);
    virtual void _OB_dispatch(OB::Upcall_ptr);

    //
    // IDL:ClientInterfaces/IClientServer/ReceiveMessage:1.0
    //
    virtual void ReceiveMessage(const ::DomainData::Address& senderAddress,
                                const ::DomainData::Message& msg)
        throw(::CORBA::SystemException) = 0;

    //
    // IDL:ClientInterfaces/IClientServer/ChangeServer:1.0
    //
    virtual void ChangeServer(const ::DomainData::Address& serverAddress)
        throw(::CORBA::SystemException) = 0;

    //
    // IDL:ClientInterfaces/IClientServer/CreatePipeRequest:1.0
    //
    virtual ::CORBA::Boolean CreatePipeRequest(const ::DomainData::Address& pipeHolderAddress,
                                               const ::DomainData::Address& senderAddress)
        throw(::CORBA::SystemException) = 0;
};

//
// IDL:ClientInterfaces/IClientClient:1.0
//
class IClientClient : virtual public PortableServer::ServantBase
{
    IClientClient(const IClientClient&);
    void operator=(const IClientClient&);

protected:

    //
    // IDL:ClientInterfaces/IClientClient/SendFile:1.0
    //
    void _OB_op_SendFile(OB::Upcall_ptr);

    //
    // IDL:ClientInterfaces/IClientClient/CreatePipe:1.0
    //
    void _OB_op_CreatePipe(OB::Upcall_ptr);

    //
    // IDL:ClientInterfaces/IClientClient/GetFile:1.0
    //
    void _OB_op_GetFile(OB::Upcall_ptr);

public:

    IClientClient() { }

    virtual ::CORBA::Boolean _is_a(const char*)
        throw(::CORBA::SystemException);

    virtual ::CORBA::RepositoryId _primary_interface(
        const PortableServer::ObjectId&,
        PortableServer::POA_ptr);

    ClientInterfaces::IClientClient_ptr _this();

    virtual OB::DirectStubImpl_ptr _OB_createDirectStubImpl(
        PortableServer::POA_ptr,
        const PortableServer::ObjectId&);
    virtual void _OB_dispatch(OB::Upcall_ptr);

    //
    // IDL:ClientInterfaces/IClientClient/SendFile:1.0
    //
    virtual void SendFile(const ::DomainData::File& f,
                          const ::DomainData::Address& receiverAddress)
        throw(::CORBA::SystemException) = 0;

    //
    // IDL:ClientInterfaces/IClientClient/CreatePipe:1.0
    //
    virtual void CreatePipe()
        throw(::CORBA::SystemException) = 0;

    //
    // IDL:ClientInterfaces/IClientClient/GetFile:1.0
    //
    virtual ::DomainData::File* GetFile(const ::DomainData::Address& senderAddress)
        throw(::CORBA::SystemException) = 0;
};

} // End of namespace POA_ClientInterfaces

//
// IDL:DomainData:1.0
//
namespace OBDirectStubImpl_DomainData
{

} // End of namespace OBDirectStubImpl_DomainData

//
// IDL:ClientInterfaces:1.0
//
namespace OBDirectStubImpl_ClientInterfaces
{

//
// IDL:ClientInterfaces/IClientServer:1.0
//
class IClientServer : virtual public OBStubImpl_ClientInterfaces::IClientServer,
                      virtual public OB::DirectStubImpl
{
    IClientServer(const IClientServer&);
    void operator=(const IClientServer&);

protected:

#ifdef HAVE_VCPLUSPLUS_BUGS

    IClientServer() { }

#endif

    IClientServer(PortableServer::POA_ptr,
                  const PortableServer::ObjectId&,
                  PortableServer::ServantBase*);

    friend class POA_ClientInterfaces::IClientServer;

public:

    //
    // IDL:ClientInterfaces/IClientServer/ReceiveMessage:1.0
    //
    virtual void ReceiveMessage(const ::DomainData::Address& senderAddress,
                                const ::DomainData::Message& msg);

    //
    // IDL:ClientInterfaces/IClientServer/ChangeServer:1.0
    //
    virtual void ChangeServer(const ::DomainData::Address& serverAddress);

    //
    // IDL:ClientInterfaces/IClientServer/CreatePipeRequest:1.0
    //
    virtual ::CORBA::Boolean CreatePipeRequest(const ::DomainData::Address& pipeHolderAddress,
                                               const ::DomainData::Address& senderAddress);
};

//
// IDL:ClientInterfaces/IClientClient:1.0
//
class IClientClient : virtual public OBStubImpl_ClientInterfaces::IClientClient,
                      virtual public OB::DirectStubImpl
{
    IClientClient(const IClientClient&);
    void operator=(const IClientClient&);

protected:

#ifdef HAVE_VCPLUSPLUS_BUGS

    IClientClient() { }

#endif

    IClientClient(PortableServer::POA_ptr,
                  const PortableServer::ObjectId&,
                  PortableServer::ServantBase*);

    friend class POA_ClientInterfaces::IClientClient;

public:

    //
    // IDL:ClientInterfaces/IClientClient/SendFile:1.0
    //
    virtual void SendFile(const ::DomainData::File& f,
                          const ::DomainData::Address& receiverAddress);

    //
    // IDL:ClientInterfaces/IClientClient/CreatePipe:1.0
    //
    virtual void CreatePipe();

    //
    // IDL:ClientInterfaces/IClientClient/GetFile:1.0
    //
    virtual ::DomainData::File* GetFile(const ::DomainData::Address& senderAddress);
};

} // End of namespace OBDirectStubImpl_ClientInterfaces

#endif
