// **********************************************************************
//
// Generated by the ORBacus IDL-to-C++ Translator
//
// Copyright (c) 2005
// IONA Technologies, Inc.
// Waltham, MA, USA
//
// All Rights Reserved
//
// **********************************************************************

// Version: 4.3.3

#ifndef ___ServerInterfaces_skel_h__
#define ___ServerInterfaces_skel_h__

#include <ServerInterfaces.h>


#ifndef OB_INTEGER_VERSION
#   error No ORBacus version defined! Is <OB/CORBA.h> included?
#endif

#ifndef OB_NO_VERSION_CHECK
#   if (OB_INTEGER_VERSION != 4030300L)
#       error ORBacus version mismatch!
#   endif
#endif

//
// IDL:DomainData:1.0
//
namespace POA_DomainData
{

} // End of namespace POA_DomainData

//
// IDL:ServerInterfaces:1.0
//
namespace POA_ServerInterfaces
{

//
// IDL:ServerInterfaces/IServerServer:1.0
//
class IServerServer : virtual public PortableServer::ServantBase
{
    IServerServer(const IServerServer&);
    void operator=(const IServerServer&);

protected:

    //
    // IDL:ServerInterfaces/IServerServer/Join:1.0
    //
    void _OB_op_Join(OB::Upcall_ptr);

    //
    // IDL:ServerInterfaces/IServerServer/Unjoin:1.0
    //
    void _OB_op_Unjoin(OB::Upcall_ptr);

    //
    // IDL:ServerInterfaces/IServerServer/AddServer:1.0
    //
    void _OB_op_AddServer(OB::Upcall_ptr);

    //
    // IDL:ServerInterfaces/IServerServer/RemoveServer:1.0
    //
    void _OB_op_RemoveServer(OB::Upcall_ptr);

    //
    // IDL:ServerInterfaces/IServerServer/PassMessage:1.0
    //
    void _OB_op_PassMessage(OB::Upcall_ptr);

    //
    // IDL:ServerInterfaces/IServerServer/PassCreatePipeRequest:1.0
    //
    void _OB_op_PassCreatePipeRequest(OB::Upcall_ptr);

    //
    // IDL:ServerInterfaces/IServerServer/ClientStatusChanged:1.0
    //
    void _OB_op_ClientStatusChanged(OB::Upcall_ptr);

public:

    IServerServer() { }

    virtual ::CORBA::Boolean _is_a(const char*)
        throw(::CORBA::SystemException);

    virtual ::CORBA::RepositoryId _primary_interface(
        const PortableServer::ObjectId&,
        PortableServer::POA_ptr);

    ServerInterfaces::IServerServer_ptr _this();

    virtual OB::DirectStubImpl_ptr _OB_createDirectStubImpl(
        PortableServer::POA_ptr,
        const PortableServer::ObjectId&);
    virtual void _OB_dispatch(OB::Upcall_ptr);

    //
    // IDL:ServerInterfaces/IServerServer/Join:1.0
    //
    virtual ::ServerInterfaces::AddressesList* Join()
        throw(::CORBA::SystemException) = 0;

    //
    // IDL:ServerInterfaces/IServerServer/Unjoin:1.0
    //
    virtual void Unjoin()
        throw(::CORBA::SystemException) = 0;

    //
    // IDL:ServerInterfaces/IServerServer/AddServer:1.0
    //
    virtual void AddServer(const ::DomainData::Address& serverAddress)
        throw(::CORBA::SystemException) = 0;

    //
    // IDL:ServerInterfaces/IServerServer/RemoveServer:1.0
    //
    virtual void RemoveServer(const ::DomainData::Address& serverAddress)
        throw(::CORBA::SystemException) = 0;

    //
    // IDL:ServerInterfaces/IServerServer/PassMessage:1.0
    //
    virtual void PassMessage(const ::DomainData::Message& msg,
                             const ::DomainData::Address& senderAddress,
                             const ::DomainData::Address& receiverAddress)
        throw(::CORBA::SystemException) = 0;

    //
    // IDL:ServerInterfaces/IServerServer/PassCreatePipeRequest:1.0
    //
    virtual void PassCreatePipeRequest(const ::DomainData::Address& pipeHolderAddress,
                                       const ::DomainData::Address& senderAddress,
                                       const ::DomainData::Address& receiverAddress)
        throw(::CORBA::SystemException) = 0;

    //
    // IDL:ServerInterfaces/IServerServer/ClientStatusChanged:1.0
    //
    virtual void ClientStatusChanged(const ::DomainData::Address& clientAddress,
                                     const ::DomainData::Enability& en)
        throw(::CORBA::SystemException) = 0;
};

//
// IDL:ServerInterfaces/IServerClient:1.0
//
class IServerClient : virtual public PortableServer::ServantBase
{
    IServerClient(const IServerClient&);
    void operator=(const IServerClient&);

protected:

    //
    // IDL:ServerInterfaces/IServerClient/Connect:1.0
    //
    void _OB_op_Connect(OB::Upcall_ptr);

    //
    // IDL:ServerInterfaces/IServerClient/Disconnect:1.0
    //
    void _OB_op_Disconnect(OB::Upcall_ptr);

    //
    // IDL:ServerInterfaces/IServerClient/Register:1.0
    //
    void _OB_op_Register(OB::Upcall_ptr);

    //
    // IDL:ServerInterfaces/IServerClient/SendMessage:1.0
    //
    void _OB_op_SendMessage(OB::Upcall_ptr);

    //
    // IDL:ServerInterfaces/IServerClient/CheckClientStatus:1.0
    //
    void _OB_op_CheckClientStatus(OB::Upcall_ptr);

    //
    // IDL:ServerInterfaces/IServerClient/GetPipeHolder:1.0
    //
    void _OB_op_GetPipeHolder(OB::Upcall_ptr);

public:

    IServerClient() { }

    virtual ::CORBA::Boolean _is_a(const char*)
        throw(::CORBA::SystemException);

    virtual ::CORBA::RepositoryId _primary_interface(
        const PortableServer::ObjectId&,
        PortableServer::POA_ptr);

    ServerInterfaces::IServerClient_ptr _this();

    virtual OB::DirectStubImpl_ptr _OB_createDirectStubImpl(
        PortableServer::POA_ptr,
        const PortableServer::ObjectId&);
    virtual void _OB_dispatch(OB::Upcall_ptr);

    //
    // IDL:ServerInterfaces/IServerClient/Connect:1.0
    //
    virtual ::DomainData::Address* Connect(::DomainData::Mode m,
                                           const ::DomainData::User& usr)
        throw(::CORBA::SystemException) = 0;

    //
    // IDL:ServerInterfaces/IServerClient/Disconnect:1.0
    //
    virtual void Disconnect()
        throw(::CORBA::SystemException) = 0;

    //
    // IDL:ServerInterfaces/IServerClient/Register:1.0
    //
    virtual ::DomainData::User* Register(const ::DomainData::User& usr)
        throw(::CORBA::SystemException) = 0;

    //
    // IDL:ServerInterfaces/IServerClient/SendMessage:1.0
    //
    virtual void SendMessage(const ::DomainData::Address& receiverAddress,
                             const ::DomainData::Message& msg)
        throw(::CORBA::SystemException) = 0;

    //
    // IDL:ServerInterfaces/IServerClient/CheckClientStatus:1.0
    //
    virtual ::DomainData::Enability CheckClientStatus(const ::DomainData::Address& clientAddress)
        throw(::CORBA::SystemException) = 0;

    //
    // IDL:ServerInterfaces/IServerClient/GetPipeHolder:1.0
    //
    virtual ::DomainData::Address* GetPipeHolder(const ::DomainData::Address& receiverAddress)
        throw(::CORBA::SystemException) = 0;
};

} // End of namespace POA_ServerInterfaces

//
// IDL:DomainData:1.0
//
namespace OBDirectStubImpl_DomainData
{

} // End of namespace OBDirectStubImpl_DomainData

//
// IDL:ServerInterfaces:1.0
//
namespace OBDirectStubImpl_ServerInterfaces
{

//
// IDL:ServerInterfaces/IServerServer:1.0
//
class IServerServer : virtual public OBStubImpl_ServerInterfaces::IServerServer,
                      virtual public OB::DirectStubImpl
{
    IServerServer(const IServerServer&);
    void operator=(const IServerServer&);

protected:

#ifdef HAVE_VCPLUSPLUS_BUGS

    IServerServer() { }

#endif

    IServerServer(PortableServer::POA_ptr,
                  const PortableServer::ObjectId&,
                  PortableServer::ServantBase*);

    friend class POA_ServerInterfaces::IServerServer;

public:

    //
    // IDL:ServerInterfaces/IServerServer/Join:1.0
    //
    virtual ::ServerInterfaces::AddressesList* Join();

    //
    // IDL:ServerInterfaces/IServerServer/Unjoin:1.0
    //
    virtual void Unjoin();

    //
    // IDL:ServerInterfaces/IServerServer/AddServer:1.0
    //
    virtual void AddServer(const ::DomainData::Address& serverAddress);

    //
    // IDL:ServerInterfaces/IServerServer/RemoveServer:1.0
    //
    virtual void RemoveServer(const ::DomainData::Address& serverAddress);

    //
    // IDL:ServerInterfaces/IServerServer/PassMessage:1.0
    //
    virtual void PassMessage(const ::DomainData::Message& msg,
                             const ::DomainData::Address& senderAddress,
                             const ::DomainData::Address& receiverAddress);

    //
    // IDL:ServerInterfaces/IServerServer/PassCreatePipeRequest:1.0
    //
    virtual void PassCreatePipeRequest(const ::DomainData::Address& pipeHolderAddress,
                                       const ::DomainData::Address& senderAddress,
                                       const ::DomainData::Address& receiverAddress);

    //
    // IDL:ServerInterfaces/IServerServer/ClientStatusChanged:1.0
    //
    virtual void ClientStatusChanged(const ::DomainData::Address& clientAddress,
                                     const ::DomainData::Enability& en);
};

//
// IDL:ServerInterfaces/IServerClient:1.0
//
class IServerClient : virtual public OBStubImpl_ServerInterfaces::IServerClient,
                      virtual public OB::DirectStubImpl
{
    IServerClient(const IServerClient&);
    void operator=(const IServerClient&);

protected:

#ifdef HAVE_VCPLUSPLUS_BUGS

    IServerClient() { }

#endif

    IServerClient(PortableServer::POA_ptr,
                  const PortableServer::ObjectId&,
                  PortableServer::ServantBase*);

    friend class POA_ServerInterfaces::IServerClient;

public:

    //
    // IDL:ServerInterfaces/IServerClient/Connect:1.0
    //
    virtual ::DomainData::Address* Connect(::DomainData::Mode m,
                                           const ::DomainData::User& usr);

    //
    // IDL:ServerInterfaces/IServerClient/Disconnect:1.0
    //
    virtual void Disconnect();

    //
    // IDL:ServerInterfaces/IServerClient/Register:1.0
    //
    virtual ::DomainData::User* Register(const ::DomainData::User& usr);

    //
    // IDL:ServerInterfaces/IServerClient/SendMessage:1.0
    //
    virtual void SendMessage(const ::DomainData::Address& receiverAddress,
                             const ::DomainData::Message& msg);

    //
    // IDL:ServerInterfaces/IServerClient/CheckClientStatus:1.0
    //
    virtual ::DomainData::Enability CheckClientStatus(const ::DomainData::Address& clientAddress);

    //
    // IDL:ServerInterfaces/IServerClient/GetPipeHolder:1.0
    //
    virtual ::DomainData::Address* GetPipeHolder(const ::DomainData::Address& receiverAddress);
};

} // End of namespace OBDirectStubImpl_ServerInterfaces

#endif
