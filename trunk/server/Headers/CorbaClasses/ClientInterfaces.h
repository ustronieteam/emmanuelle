// **********************************************************************
//
// Generated by the ORBacus IDL-to-C++ Translator
//
// Copyright (c) 2005
// IONA Technologies, Inc.
// Waltham, MA, USA
//
// All Rights Reserved
//
// **********************************************************************
// Version: 4.3.3

///
/// @author	Mateusz Ko³odziejczyk
/// @date	06.01.2009
///
/// @brief	Wygenerowany na podstawie pliku IDLa
///
/// Znajduja sie tutaj klasy: IClientClient, IClientServer a takze definicje struktur:
/// Message, Address, File, Enability, User i enum: Active
///

#ifndef ___ClientInterfaces_h__
#define ___ClientInterfaces_h__


#ifndef OB_INTEGER_VERSION
#   error No ORBacus version defined! Is <OB/CORBA.h> included?
#endif

#ifndef OB_NO_VERSION_CHECK
#   if (OB_INTEGER_VERSION != 4030300L)
#       error ORBacus version mismatch!
#   endif
#endif

namespace DomainData
{

} // End of namespace DomainData

namespace ClientInterfaces
{

class IClientServer;
typedef IClientServer* IClientServer_ptr;
typedef IClientServer* IClientServerRef;

extern OB::TypeCodeConst _tc_IClientServer;

class IClientClient;
typedef IClientClient* IClientClient_ptr;
typedef IClientClient* IClientClientRef;

extern OB::TypeCodeConst _tc_IClientClient;

} // End of namespace ClientInterfaces

void OBDuplicate(ClientInterfaces::IClientServer_ptr);
void OBRelease(ClientInterfaces::IClientServer_ptr);

void OBMarshal(ClientInterfaces::IClientServer_ptr, OB::OutputStreamImpl*);
void OBUnmarshal(ClientInterfaces::IClientServer_ptr&, OB::InputStreamImpl*);

void OBDuplicate(ClientInterfaces::IClientClient_ptr);
void OBRelease(ClientInterfaces::IClientClient_ptr);

void OBMarshal(ClientInterfaces::IClientClient_ptr, OB::OutputStreamImpl*);
void OBUnmarshal(ClientInterfaces::IClientClient_ptr&, OB::InputStreamImpl*);

namespace DomainData
{

} // End of namespace DomainData

namespace ClientInterfaces
{

typedef OB::ObjVar< IClientServer > IClientServer_var;
typedef OB::ObjOut< IClientServer > IClientServer_out;

typedef OB::ObjVar< IClientClient > IClientClient_var;
typedef OB::ObjOut< IClientClient > IClientClient_out;

} // End of namespace ClientInterfaces

namespace OBStubImpl_DomainData
{

} // End of namespace OBStubImpl_DomainData

namespace OBStubImpl_ClientInterfaces
{

class IClientServer;
typedef IClientServer* IClientServer_ptr;

class IClientClient;
typedef IClientClient* IClientClient_ptr;

} // End of namespace OBStubImpl_ClientInterfaces

void OBDuplicate(OBStubImpl_ClientInterfaces::IClientServer_ptr);
void OBRelease(OBStubImpl_ClientInterfaces::IClientServer_ptr);

void OBDuplicate(OBStubImpl_ClientInterfaces::IClientClient_ptr);
void OBRelease(OBStubImpl_ClientInterfaces::IClientClient_ptr);

namespace OBStubImpl_DomainData
{

} // End of namespace OBStubImpl_DomainData

namespace OBStubImpl_ClientInterfaces
{

typedef OB::ObjVar< IClientServer > IClientServer_var;

typedef OB::ObjVar< IClientClient > IClientClient_var;

} // End of namespace OBStubImpl_ClientInterfaces

//
// IDL:DomainData:1.0
//
namespace DomainData
{

//
// IDL:DomainData/Address:1.0
//
struct Address;
typedef OB::VarVar< Address > Address_var;
typedef OB::VarOut< Address > Address_out;

struct Address
{
    Address() { }
    Address(const Address&);
    Address& operator=(const Address&);

    typedef Address_var _var_type;

    OB::StrForStruct name;
    OB::StrForStruct localization;

    void _OB_marshal(OB::OutputStreamImpl*) const;
    static void _OB_unmarshal(Address&, OB::InputStreamImpl*);
};

extern OB::TypeCodeConst _tc_Address;

//
// IDL:DomainData/Message:1.0
//
struct Message;
typedef OB::VarVar< Message > Message_var;
typedef OB::VarOut< Message > Message_out;

struct Message
{
    Message() { }
    Message(const Message&);
    Message& operator=(const Message&);

    typedef Message_var _var_type;

    OB::StrForStruct content;

    void _OB_marshal(OB::OutputStreamImpl*) const;
    static void _OB_unmarshal(Message&, OB::InputStreamImpl*);
};

extern OB::TypeCodeConst _tc_Message;

//
// IDL:DomainData/File:1.0
//
struct File;
typedef OB::VarVar< File > File_var;
typedef OB::VarOut< File > File_out;

struct File
{
    File() { }
    File(const File&);
    File& operator=(const File&);

    typedef File_var _var_type;

    OB::StrForStruct path;

    void _OB_marshal(OB::OutputStreamImpl*) const;
    static void _OB_unmarshal(File&, OB::InputStreamImpl*);
};

extern OB::TypeCodeConst _tc_File;

//
// IDL:DomainData/Mode:1.0
//
enum Mode
{
    passiv,
    active
};

typedef Mode& Mode_out;

extern OB::TypeCodeConst _tc_Mode;

//
// IDL:DomainData/Enability:1.0
//
struct Enability;
typedef OB::FixVar< Enability > Enability_var;
typedef Enability& Enability_out;

struct Enability
{
    typedef Enability_var _var_type;

    ::CORBA::Boolean status;
    Mode mode_;

    void _OB_marshal(OB::OutputStreamImpl*) const;
    static void _OB_unmarshal(Enability&, OB::InputStreamImpl*);
};

extern OB::TypeCodeConst _tc_Enability;

//
// IDL:DomainData/User:1.0
//
struct User;
typedef OB::VarVar< User > User_var;
typedef OB::VarOut< User > User_out;

struct User
{
#ifdef OB_CLEAR_MEM
    User();
#else
    User() { }
#endif
    User(const User&);
    User& operator=(const User&);

    typedef User_var _var_type;

    OB::StrForStruct name;
    ::CORBA::Long number;

    void _OB_marshal(OB::OutputStreamImpl*) const;
    static void _OB_unmarshal(User&, OB::InputStreamImpl*);
};

extern OB::TypeCodeConst _tc_User;

} // End of namespace DomainData

//
// IDL:ClientInterfaces:1.0
//
namespace ClientInterfaces
{

//
// IDL:ClientInterfaces/IClientServer:1.0
//
class IClientServer : virtual public ::CORBA::Object
{
    IClientServer(const IClientServer&);
    void operator=(const IClientServer&);

protected:

    static const char* ids_[];

public:

    IClientServer() { }
    virtual ~IClientServer() { }

    typedef IClientServer_ptr _ptr_type;
    typedef IClientServer_var _var_type;

    static inline IClientServer_ptr
    _duplicate(IClientServer_ptr p)
    {
        if(p)
            p -> _add_ref();
        return p;
    }

    static inline IClientServer_ptr
    _nil()
    {
        return 0;
    }

    static IClientServer_ptr _narrow(::CORBA::Object_ptr);
    static IClientServer_ptr _unchecked_narrow(::CORBA::Object_ptr);

    static IClientServer_ptr _narrow(::CORBA::AbstractBase_ptr);
    static IClientServer_ptr _unchecked_narrow(::CORBA::AbstractBase_ptr);

    static const char** _OB_staticIds();

    //
    // IDL:ClientInterfaces/IClientServer/ReceiveMessage:1.0
    //
    virtual void ReceiveMessage(const ::DomainData::Address& senderAddress,
                                const ::DomainData::Message& msg) = 0;

    //
    // IDL:ClientInterfaces/IClientServer/ChangeServer:1.0
    //
    virtual void ChangeServer(const ::DomainData::Address& serverAddress) = 0;

    //
    // IDL:ClientInterfaces/IClientServer/CreatePipeRequest:1.0
    //
    virtual ::CORBA::Boolean CreatePipeRequest(const ::DomainData::Address& pipeHolderAddress,
                                               const ::DomainData::Address& senderAddress) = 0;
};

//
// IDL:ClientInterfaces/IClientClient:1.0
//
class IClientClient : virtual public ::CORBA::Object
{
    IClientClient(const IClientClient&);
    void operator=(const IClientClient&);

protected:

    static const char* ids_[];

public:

    IClientClient() { }
    virtual ~IClientClient() { }

    typedef IClientClient_ptr _ptr_type;
    typedef IClientClient_var _var_type;

    static inline IClientClient_ptr
    _duplicate(IClientClient_ptr p)
    {
        if(p)
            p -> _add_ref();
        return p;
    }

    static inline IClientClient_ptr
    _nil()
    {
        return 0;
    }

    static IClientClient_ptr _narrow(::CORBA::Object_ptr);
    static IClientClient_ptr _unchecked_narrow(::CORBA::Object_ptr);

    static IClientClient_ptr _narrow(::CORBA::AbstractBase_ptr);
    static IClientClient_ptr _unchecked_narrow(::CORBA::AbstractBase_ptr);

    static const char** _OB_staticIds();

    //
    // IDL:ClientInterfaces/IClientClient/SendFile:1.0
    //
    virtual void SendFile(const ::DomainData::File& f,
                          const ::DomainData::Address& receiverAddress) = 0;

    //
    // IDL:ClientInterfaces/IClientClient/CreatePipe:1.0
    //
    virtual void CreatePipe() = 0;

    //
    // IDL:ClientInterfaces/IClientClient/GetFile:1.0
    //
    virtual ::DomainData::File* GetFile(const ::DomainData::Address& senderAddress) = 0;
};

} // End of namespace ClientInterfaces

//
// IDL:DomainData:1.0
//
namespace OBProxy_DomainData
{

} // End of namespace OBProxy_DomainData

//
// IDL:ClientInterfaces:1.0
//
namespace OBProxy_ClientInterfaces
{

//
// IDL:ClientInterfaces/IClientServer:1.0
//
class IClientServer : virtual public ::ClientInterfaces::IClientServer,
                      virtual public OBCORBA::Object
{
    IClientServer(const IClientServer&);
    void operator=(const IClientServer&);

protected:

    virtual OB::MarshalStubImpl_ptr _OB_createMarshalStubImpl();

public:

    IClientServer() { }
    virtual ~IClientServer() { }

    virtual const char** _OB_ids() const;

    //
    // IDL:ClientInterfaces/IClientServer/ReceiveMessage:1.0
    //
    void ReceiveMessage(const ::DomainData::Address& senderAddress,
                        const ::DomainData::Message& msg);

    //
    // IDL:ClientInterfaces/IClientServer/ChangeServer:1.0
    //
    void ChangeServer(const ::DomainData::Address& serverAddress);

    //
    // IDL:ClientInterfaces/IClientServer/CreatePipeRequest:1.0
    //
    ::CORBA::Boolean CreatePipeRequest(const ::DomainData::Address& pipeHolderAddress,
                                       const ::DomainData::Address& senderAddress);
};

//
// IDL:ClientInterfaces/IClientClient:1.0
//
class IClientClient : virtual public ::ClientInterfaces::IClientClient,
                      virtual public OBCORBA::Object
{
    IClientClient(const IClientClient&);
    void operator=(const IClientClient&);

protected:

    virtual OB::MarshalStubImpl_ptr _OB_createMarshalStubImpl();

public:

    IClientClient() { }
    virtual ~IClientClient() { }

    virtual const char** _OB_ids() const;

    //
    // IDL:ClientInterfaces/IClientClient/SendFile:1.0
    //
    void SendFile(const ::DomainData::File& f,
                  const ::DomainData::Address& receiverAddress);

    //
    // IDL:ClientInterfaces/IClientClient/CreatePipe:1.0
    //
    void CreatePipe();

    //
    // IDL:ClientInterfaces/IClientClient/GetFile:1.0
    //
    ::DomainData::File* GetFile(const ::DomainData::Address& senderAddress);
};

} // End of namespace OBProxy_ClientInterfaces

//
// IDL:DomainData:1.0
//
namespace OBStubImpl_DomainData
{

} // End of namespace OBStubImpl_DomainData

//
// IDL:ClientInterfaces:1.0
//
namespace OBStubImpl_ClientInterfaces
{

//
// IDL:ClientInterfaces/IClientServer:1.0
//
class IClientServer : virtual public OB::StubImplBase
{
    IClientServer(const IClientServer&);
    void operator=(const IClientServer&);

protected:

    IClientServer() { }

public:

    static inline IClientServer_ptr
    _duplicate(IClientServer_ptr p)
    {
        if(p)
            p -> _OB_incRef();
        return p;
    }

    static inline IClientServer_ptr
    _nil()
    {
        return 0;
    }

    //
    // IDL:ClientInterfaces/IClientServer/ReceiveMessage:1.0
    //
    virtual void ReceiveMessage(const ::DomainData::Address& senderAddress,
                                const ::DomainData::Message& msg) = 0;

    //
    // IDL:ClientInterfaces/IClientServer/ChangeServer:1.0
    //
    virtual void ChangeServer(const ::DomainData::Address& serverAddress) = 0;

    //
    // IDL:ClientInterfaces/IClientServer/CreatePipeRequest:1.0
    //
    virtual ::CORBA::Boolean CreatePipeRequest(const ::DomainData::Address& pipeHolderAddress,
                                               const ::DomainData::Address& senderAddress) = 0;
};

//
// IDL:ClientInterfaces/IClientClient:1.0
//
class IClientClient : virtual public OB::StubImplBase
{
    IClientClient(const IClientClient&);
    void operator=(const IClientClient&);

protected:

    IClientClient() { }

public:

    static inline IClientClient_ptr
    _duplicate(IClientClient_ptr p)
    {
        if(p)
            p -> _OB_incRef();
        return p;
    }

    static inline IClientClient_ptr
    _nil()
    {
        return 0;
    }

    //
    // IDL:ClientInterfaces/IClientClient/SendFile:1.0
    //
    virtual void SendFile(const ::DomainData::File& f,
                          const ::DomainData::Address& receiverAddress) = 0;

    //
    // IDL:ClientInterfaces/IClientClient/CreatePipe:1.0
    //
    virtual void CreatePipe() = 0;

    //
    // IDL:ClientInterfaces/IClientClient/GetFile:1.0
    //
    virtual ::DomainData::File* GetFile(const ::DomainData::Address& senderAddress) = 0;
};

} // End of namespace OBStubImpl_ClientInterfaces

//
// IDL:DomainData:1.0
//
namespace OBMarshalStubImpl_DomainData
{

} // End of namespace OBMarshalStubImpl_DomainData

//
// IDL:ClientInterfaces:1.0
//
namespace OBMarshalStubImpl_ClientInterfaces
{

//
// IDL:ClientInterfaces/IClientServer:1.0
//
class IClientServer : 
    virtual public OBStubImpl_ClientInterfaces::IClientServer,
    virtual public OB::MarshalStubImpl
{
    IClientServer(const IClientServer&);
    void operator=(const IClientServer&);

protected:

    IClientServer() { }
    friend class OBProxy_ClientInterfaces::IClientServer;

public:

    //
    // IDL:ClientInterfaces/IClientServer/ReceiveMessage:1.0
    //
    virtual void ReceiveMessage(const ::DomainData::Address& senderAddress,
                                const ::DomainData::Message& msg);

    //
    // IDL:ClientInterfaces/IClientServer/ChangeServer:1.0
    //
    virtual void ChangeServer(const ::DomainData::Address& serverAddress);

    //
    // IDL:ClientInterfaces/IClientServer/CreatePipeRequest:1.0
    //
    virtual ::CORBA::Boolean CreatePipeRequest(const ::DomainData::Address& pipeHolderAddress,
                                               const ::DomainData::Address& senderAddress);
};

//
// IDL:ClientInterfaces/IClientClient:1.0
//
class IClientClient : 
    virtual public OBStubImpl_ClientInterfaces::IClientClient,
    virtual public OB::MarshalStubImpl
{
    IClientClient(const IClientClient&);
    void operator=(const IClientClient&);

protected:

    IClientClient() { }
    friend class OBProxy_ClientInterfaces::IClientClient;

public:

    //
    // IDL:ClientInterfaces/IClientClient/SendFile:1.0
    //
    virtual void SendFile(const ::DomainData::File& f,
                          const ::DomainData::Address& receiverAddress);

    //
    // IDL:ClientInterfaces/IClientClient/CreatePipe:1.0
    //
    virtual void CreatePipe();

    //
    // IDL:ClientInterfaces/IClientClient/GetFile:1.0
    //
    virtual ::DomainData::File* GetFile(const ::DomainData::Address& senderAddress);
};

} // End of namespace OBMarshalStubImpl_ClientInterfaces

//
// IDL:DomainData:1.0
//
namespace OBV_DomainData
{

} // End of namespace OBV_DomainData

//
// IDL:ClientInterfaces:1.0
//
namespace OBV_ClientInterfaces
{

} // End of namespace OBV_ClientInterfaces

//
// IDL:DomainData/Address:1.0
//
void operator<<=(::CORBA::Any&, DomainData::Address*);
void operator<<=(::CORBA::Any&, const DomainData::Address&);
CORBA::Boolean operator>>=(const ::CORBA::Any&, const DomainData::Address*&);

inline void
operator<<=(::CORBA::Any_var& any, DomainData::Address* val)
{
    any.inout() <<= val;
}

inline void
operator<<=(::CORBA::Any_var& any, const DomainData::Address& val)
{
    any.inout() <<= val;
}

inline ::CORBA::Boolean
operator>>=(const ::CORBA::Any_var& any, const DomainData::Address*& val)
{
    return any.in() >>= val;
}

//
// IDL:DomainData/Message:1.0
//
void operator<<=(::CORBA::Any&, DomainData::Message*);
void operator<<=(::CORBA::Any&, const DomainData::Message&);
CORBA::Boolean operator>>=(const ::CORBA::Any&, const DomainData::Message*&);

inline void
operator<<=(::CORBA::Any_var& any, DomainData::Message* val)
{
    any.inout() <<= val;
}

inline void
operator<<=(::CORBA::Any_var& any, const DomainData::Message& val)
{
    any.inout() <<= val;
}

inline ::CORBA::Boolean
operator>>=(const ::CORBA::Any_var& any, const DomainData::Message*& val)
{
    return any.in() >>= val;
}

//
// IDL:DomainData/File:1.0
//
void operator<<=(::CORBA::Any&, DomainData::File*);
void operator<<=(::CORBA::Any&, const DomainData::File&);
CORBA::Boolean operator>>=(const ::CORBA::Any&, const DomainData::File*&);

inline void
operator<<=(::CORBA::Any_var& any, DomainData::File* val)
{
    any.inout() <<= val;
}

inline void
operator<<=(::CORBA::Any_var& any, const DomainData::File& val)
{
    any.inout() <<= val;
}

inline ::CORBA::Boolean
operator>>=(const ::CORBA::Any_var& any, const DomainData::File*& val)
{
    return any.in() >>= val;
}

//
// IDL:DomainData/Mode:1.0
//
void operator<<=(::CORBA::Any&, DomainData::Mode);
CORBA::Boolean operator>>=(const ::CORBA::Any&, DomainData::Mode&);

inline void
operator<<=(::CORBA::Any_var& any, DomainData::Mode val)
{
    any.inout() <<= val;
}

inline ::CORBA::Boolean
operator>>=(const ::CORBA::Any_var& any, DomainData::Mode& val)
{
    return any.in() >>= val;
}

//
// IDL:DomainData/Enability:1.0
//
void operator<<=(::CORBA::Any&, DomainData::Enability*);
void operator<<=(::CORBA::Any&, const DomainData::Enability&);
CORBA::Boolean operator>>=(const ::CORBA::Any&, const DomainData::Enability*&);

inline void
operator<<=(::CORBA::Any_var& any, DomainData::Enability* val)
{
    any.inout() <<= val;
}

inline void
operator<<=(::CORBA::Any_var& any, const DomainData::Enability& val)
{
    any.inout() <<= val;
}

inline ::CORBA::Boolean
operator>>=(const ::CORBA::Any_var& any, const DomainData::Enability*& val)
{
    return any.in() >>= val;
}

//
// IDL:DomainData/User:1.0
//
void operator<<=(::CORBA::Any&, DomainData::User*);
void operator<<=(::CORBA::Any&, const DomainData::User&);
CORBA::Boolean operator>>=(const ::CORBA::Any&, const DomainData::User*&);

inline void
operator<<=(::CORBA::Any_var& any, DomainData::User* val)
{
    any.inout() <<= val;
}

inline void
operator<<=(::CORBA::Any_var& any, const DomainData::User& val)
{
    any.inout() <<= val;
}

inline ::CORBA::Boolean
operator>>=(const ::CORBA::Any_var& any, const DomainData::User*& val)
{
    return any.in() >>= val;
}

//
// IDL:ClientInterfaces/IClientServer:1.0
//
namespace CORBA
{

inline void
release(::ClientInterfaces::IClientServer_ptr p)
{
    if(p)
        p -> _remove_ref();
}

inline Boolean
is_nil(::ClientInterfaces::IClientServer_ptr p)
{
    return p == 0;
}

inline void
release(OBStubImpl_ClientInterfaces::IClientServer_ptr p)
{
    if(p)
        p -> _OB_decRef();
}

inline Boolean
is_nil(OBStubImpl_ClientInterfaces::IClientServer_ptr p)
{
    return p == 0;
}

} // End of namespace CORBA

void operator<<=(::CORBA::Any&, ClientInterfaces::IClientServer_ptr*);
void operator<<=(::CORBA::Any&, ClientInterfaces::IClientServer_ptr);
CORBA::Boolean operator>>=(const ::CORBA::Any&, ClientInterfaces::IClientServer_ptr&);

inline void
operator<<=(::CORBA::Any_var& any, ClientInterfaces::IClientServer_ptr* val)
{
    any.inout() <<= val;
}

inline void
operator<<=(::CORBA::Any_var& any, ClientInterfaces::IClientServer_ptr val)
{
    any.inout() <<= val;
}

inline CORBA::Boolean
operator>>=(const ::CORBA::Any_var& any, ClientInterfaces::IClientServer_ptr& val)
{
    return any.in() >>= val;
}

//
// IDL:ClientInterfaces/IClientClient:1.0
//
namespace CORBA
{

inline void
release(::ClientInterfaces::IClientClient_ptr p)
{
    if(p)
        p -> _remove_ref();
}

inline Boolean
is_nil(::ClientInterfaces::IClientClient_ptr p)
{
    return p == 0;
}

inline void
release(OBStubImpl_ClientInterfaces::IClientClient_ptr p)
{
    if(p)
        p -> _OB_decRef();
}

inline Boolean
is_nil(OBStubImpl_ClientInterfaces::IClientClient_ptr p)
{
    return p == 0;
}

} // End of namespace CORBA

void operator<<=(::CORBA::Any&, ClientInterfaces::IClientClient_ptr*);
void operator<<=(::CORBA::Any&, ClientInterfaces::IClientClient_ptr);
CORBA::Boolean operator>>=(const ::CORBA::Any&, ClientInterfaces::IClientClient_ptr&);

inline void
operator<<=(::CORBA::Any_var& any, ClientInterfaces::IClientClient_ptr* val)
{
    any.inout() <<= val;
}

inline void
operator<<=(::CORBA::Any_var& any, ClientInterfaces::IClientClient_ptr val)
{
    any.inout() <<= val;
}

inline CORBA::Boolean
operator>>=(const ::CORBA::Any_var& any, ClientInterfaces::IClientClient_ptr& val)
{
    return any.in() >>= val;
}

#endif
