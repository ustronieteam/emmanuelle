// **********************************************************************
//
// Generated by the ORBacus IDL-to-C++ Translator
//
// Copyright (c) 2005
// IONA Technologies, Inc.
// Waltham, MA, USA
//
// All Rights Reserved
//
// **********************************************************************

// Version: 4.3.3

#ifndef ___IClientServer_skel_h__
#define ___IClientServer_skel_h__

#include <IClientServer.h>

#ifndef OB_INTEGER_VERSION
#   error No ORBacus version defined! Is <OB/CORBA.h> included?
#endif

#ifndef OB_NO_VERSION_CHECK
#   if (OB_INTEGER_VERSION != 4030300L)
#       error ORBacus version mismatch!
#   endif
#endif

//
// IDL:IClientServer:1.0
//
class POA_IClientServer : virtual public PortableServer::ServantBase
{
    POA_IClientServer(const POA_IClientServer&);
    void operator=(const POA_IClientServer&);

protected:

    //
    // IDL:IClientServer/ReceiveMessage:1.0
    //
    void _OB_op_ReceiveMessage(OB::Upcall_ptr);

    //
    // IDL:IClientServer/ChangeServer:1.0
    //
    void _OB_op_ChangeServer(OB::Upcall_ptr);

    //
    // IDL:IClientServer/CreatePipeRequest:1.0
    //
    void _OB_op_CreatePipeRequest(OB::Upcall_ptr);

public:

    POA_IClientServer() { }

    virtual ::CORBA::Boolean _is_a(const char*)
        throw(::CORBA::SystemException);

    virtual ::CORBA::RepositoryId _primary_interface(
        const PortableServer::ObjectId&,
        PortableServer::POA_ptr);

    IClientServer_ptr _this();

    virtual OB::DirectStubImpl_ptr _OB_createDirectStubImpl(
        PortableServer::POA_ptr,
        const PortableServer::ObjectId&);
    virtual void _OB_dispatch(OB::Upcall_ptr);

    //
    // IDL:IClientServer/ReceiveMessage:1.0
    //
    virtual void ReceiveMessage(const ::DomainData::Address& senderAddress,
                                const ::DomainData::Message& msg)
        throw(::CORBA::SystemException) = 0;

    //
    // IDL:IClientServer/ChangeServer:1.0
    //
    virtual void ChangeServer(const ::DomainData::Address& serverAddress)
        throw(::CORBA::SystemException) = 0;

    //
    // IDL:IClientServer/CreatePipeRequest:1.0
    //
    virtual ::CORBA::Boolean CreatePipeRequest(const ::DomainData::Address& pipeHolderAddress,
                                               const ::DomainData::Address& senderAddress)
        throw(::CORBA::SystemException) = 0;
};

//
// IDL:IClientServer:1.0
//
class OBDirectStubImpl_IClientServer : virtual public OBStubImpl_IClientServer,
                                       virtual public OB::DirectStubImpl
{
    OBDirectStubImpl_IClientServer(const OBDirectStubImpl_IClientServer&);
    void operator=(const OBDirectStubImpl_IClientServer&);

protected:

#ifdef HAVE_VCPLUSPLUS_BUGS

    OBDirectStubImpl_IClientServer() { }

#endif

    OBDirectStubImpl_IClientServer(PortableServer::POA_ptr,
                                   const PortableServer::ObjectId&,
                                   PortableServer::ServantBase*);

    friend class POA_IClientServer;

public:

    //
    // IDL:IClientServer/ReceiveMessage:1.0
    //
    virtual void ReceiveMessage(const ::DomainData::Address& senderAddress,
                                const ::DomainData::Message& msg);

    //
    // IDL:IClientServer/ChangeServer:1.0
    //
    virtual void ChangeServer(const ::DomainData::Address& serverAddress);

    //
    // IDL:IClientServer/CreatePipeRequest:1.0
    //
    virtual ::CORBA::Boolean CreatePipeRequest(const ::DomainData::Address& pipeHolderAddress,
                                               const ::DomainData::Address& senderAddress);
};

#endif
