// **********************************************************************
//
// Generated by the ORBacus IDL-to-C++ Translator
//
// Copyright (c) 2005
// IONA Technologies, Inc.
// Waltham, MA, USA
//
// All Rights Reserved
//
// **********************************************************************

// Version: 4.3.3

#include <OB/CORBAClient.h>
#include <IClientServer.h>

#ifndef OB_INTEGER_VERSION
#   error No ORBacus version defined! Is <OB/CORBA.h> included?
#endif

#ifndef OB_NO_VERSION_CHECK
#   if (OB_INTEGER_VERSION != 4030300L)
#       error ORBacus version mismatch!
#   endif
#endif

::OB::TypeCodeConst _tc_IClientServer(
"017970650e000000320000000102917c1600000049444c3a49436c69656e745365727665723a3"
"12e300063000e00000049436c69656e7453657276657200"
);

//
// IDL:IClientServer:1.0
//
const char* IClientServer::ids_[] =
{
    "IDL:IClientServer:1.0",
    0
};

void
OBDuplicate(IClientServer_ptr p)
{
    if(p)
        p -> _add_ref();
}

void
OBRelease(IClientServer_ptr p)
{
    if(p)
        p -> _remove_ref();
}

IClientServer_ptr
IClientServer::_narrow(::CORBA::Object_ptr p)
{
    if(!::CORBA::is_nil(p))
    {
        IClientServer_ptr v = 
            dynamic_cast< IClientServer_ptr >(p);
        if(v)
            return _duplicate(v);

        if(p -> _is_a(ids_[0]))
        {
            OBProxy_IClientServer* val = new OBProxy_IClientServer;
            val -> _OB_copyFrom(p);
            return val;
        }
    }

    return _nil();
}

IClientServer_ptr
IClientServer::_narrow(::CORBA::AbstractBase_ptr p)
{
    if(!::CORBA::is_nil(p))
    {
        IClientServer_ptr v =
            dynamic_cast< IClientServer_ptr >(p);
        if(v)
            return _duplicate(v);

        ::CORBA::Object_var obj = p -> _to_object();
        return _narrow(obj);
    }
    return _nil();
}

IClientServer_ptr
IClientServer::_unchecked_narrow(::CORBA::Object_ptr p)
{
    if(!::CORBA::is_nil(p))
    {
        IClientServer_ptr v =
            dynamic_cast< IClientServer_ptr >(p);
        if(v)
            return _duplicate(v);

        OBProxy_IClientServer* val = new OBProxy_IClientServer;
        val -> _OB_copyFrom(p);
        return val;
    }

    return _nil();
}

IClientServer_ptr
IClientServer::_unchecked_narrow(::CORBA::AbstractBase_ptr p)
{
    if(!::CORBA::is_nil(p))
    {
        ::CORBA::Object_var obj = p -> _to_object();
        return _unchecked_narrow(obj);
    }
    return _nil();
}

const char**
IClientServer::_OB_staticIds()
{
    return ids_;
}

void
OBMarshal(IClientServer_ptr _ob_v, OB::OutputStreamImpl* _ob_out)
{
    _ob_out -> write_Object(_ob_v);
}

void
OBUnmarshal(IClientServer_ptr& _ob_v, OB::InputStreamImpl* _ob_in)
{
    IClientServer_var old = _ob_v;
    ::CORBA::Object_var p = _ob_in -> read_Object();

    if(!::CORBA::is_nil(p))
    {
        OBProxy_IClientServer* _ob_obj = new OBProxy_IClientServer;
        _ob_obj -> _OB_copyFrom(p);
        _ob_v = _ob_obj;
    }
    else
        _ob_v = IClientServer::_nil();
}

void
operator<<=(::CORBA::Any& any, IClientServer_ptr* v)
{
    any.replace(_tc_IClientServer, (::CORBA::Object_ptr)*v, true);
}

void
operator<<=(::CORBA::Any& any, IClientServer_ptr v)
{
    IClientServer_ptr val = IClientServer::_duplicate(v);
    any <<= &val;
}

::CORBA::Boolean
operator>>=(const ::CORBA::Any& any, IClientServer_ptr& v)
{
    if(any.check_type(_tc_IClientServer))
    {
        ::CORBA::Object_ptr val = (::CORBA::Object_ptr)any.value();

        if(!::CORBA::is_nil(val))
        {
            if(!(v = dynamic_cast< IClientServer_ptr >(val)))
            {
                OBProxy_IClientServer* obj = new OBProxy_IClientServer;
                obj -> _OB_copyFrom(val);
                v = obj;
                (::CORBA::Any&)any <<= &v;
            }
        }
        else
            v = IClientServer::_nil();

        return true;
    }
    else
        return false;
}

//
// IDL:IClientServer:1.0
//
OB::MarshalStubImpl_ptr
OBProxy_IClientServer::_OB_createMarshalStubImpl()
{
    return new OBMarshalStubImpl_IClientServer;
}

const char**
OBProxy_IClientServer::_OB_ids() const
{
    return ::IClientServer::ids_;
}

//
// IDL:IClientServer/ReceiveMessage:1.0
//
void
OBProxy_IClientServer::ReceiveMessage(const ::DomainData::User& _ob_a0,
                                      const ::DomainData::Message& _ob_a1)
{
    ::CORBA::ULong _ob_retry = 0, _ob_hop = 0;
    while(true)
    {
        try
        {
            OB::StubImplBase_var _ob_stubImplBase = _OB_getStubImpl();
            OBStubImpl_IClientServer_ptr _ob_stubImpl = 
                dynamic_cast< OBStubImpl_IClientServer_ptr>(_ob_stubImplBase.in());
            _ob_stubImpl -> ReceiveMessage(_ob_a0, _ob_a1);
            return;
        }
        catch(const OB::ExceptionBase& _ob_ex)
        {
            _OB_handleException(_ob_ex, _ob_retry, _ob_hop);
        }
    }
}

//
// IDL:IClientServer/ChangeServer:1.0
//
void
OBProxy_IClientServer::ChangeServer(const ::DomainData::Address& _ob_a0)
{
    ::CORBA::ULong _ob_retry = 0, _ob_hop = 0;
    while(true)
    {
        try
        {
            OB::StubImplBase_var _ob_stubImplBase = _OB_getStubImpl();
            OBStubImpl_IClientServer_ptr _ob_stubImpl = 
                dynamic_cast< OBStubImpl_IClientServer_ptr>(_ob_stubImplBase.in());
            _ob_stubImpl -> ChangeServer(_ob_a0);
            return;
        }
        catch(const OB::ExceptionBase& _ob_ex)
        {
            _OB_handleException(_ob_ex, _ob_retry, _ob_hop);
        }
    }
}

//
// IDL:IClientServer/CreatePipeRequest:1.0
//
::CORBA::Boolean
OBProxy_IClientServer::CreatePipeRequest(const ::DomainData::User& _ob_a0,
                                         const ::DomainData::User& _ob_a1)
{
    ::CORBA::ULong _ob_retry = 0, _ob_hop = 0;
    while(true)
    {
        try
        {
            OB::StubImplBase_var _ob_stubImplBase = _OB_getStubImpl();
            OBStubImpl_IClientServer_ptr _ob_stubImpl = 
                dynamic_cast< OBStubImpl_IClientServer_ptr>(_ob_stubImplBase.in());
            return _ob_stubImpl -> CreatePipeRequest(_ob_a0, _ob_a1);
        }
        catch(const OB::ExceptionBase& _ob_ex)
        {
            _OB_handleException(_ob_ex, _ob_retry, _ob_hop);
        }
    }
}

//
// IDL:IClientServer:1.0
//
void
OBDuplicate(OBStubImpl_IClientServer_ptr p)
{
    if(p)
        p -> _OB_incRef();
}

void
OBRelease(OBStubImpl_IClientServer_ptr p)
{
    if(p)
        p -> _OB_decRef();
}

//
// IDL:IClientServer/ReceiveMessage:1.0
//
void
OBMarshalStubImpl_IClientServer::ReceiveMessage(const ::DomainData::User& _ob_a0,
                                                const ::DomainData::Message& _ob_a1)
{
    while(true)
    {
        OB::Downcall_var _ob_down = _OB_createDowncall("ReceiveMessage", true);
        try
        {
            OB::OutputStreamImpl* _ob_out = _OB_preMarshal(_ob_down);
            try
            {
                _ob_a0._OB_marshal(_ob_out);
                _ob_a1._OB_marshal(_ob_out);
            }
            catch(const ::CORBA::SystemException& _ob_ex)
            {
                _OB_marshalEx(_ob_down, _ob_ex);
            }
            _OB_postMarshal(_ob_down);
            _OB_request(_ob_down);
            _OB_preUnmarshal(_ob_down);
            _OB_postUnmarshal(_ob_down);
            return;
        }
        catch(const OB::FailureException& _ob_ex)
        {
            _OB_handleFailureException(_ob_down, _ob_ex);
        }
    }
}

//
// IDL:IClientServer/ChangeServer:1.0
//
void
OBMarshalStubImpl_IClientServer::ChangeServer(const ::DomainData::Address& _ob_a0)
{
    while(true)
    {
        OB::Downcall_var _ob_down = _OB_createDowncall("ChangeServer", true);
        try
        {
            OB::OutputStreamImpl* _ob_out = _OB_preMarshal(_ob_down);
            try
            {
                _ob_a0._OB_marshal(_ob_out);
            }
            catch(const ::CORBA::SystemException& _ob_ex)
            {
                _OB_marshalEx(_ob_down, _ob_ex);
            }
            _OB_postMarshal(_ob_down);
            _OB_request(_ob_down);
            _OB_preUnmarshal(_ob_down);
            _OB_postUnmarshal(_ob_down);
            return;
        }
        catch(const OB::FailureException& _ob_ex)
        {
            _OB_handleFailureException(_ob_down, _ob_ex);
        }
    }
}

//
// IDL:IClientServer/CreatePipeRequest:1.0
//
::CORBA::Boolean
OBMarshalStubImpl_IClientServer::CreatePipeRequest(const ::DomainData::User& _ob_a0,
                                                   const ::DomainData::User& _ob_a1)
{
    while(true)
    {
        OB::Downcall_var _ob_down = _OB_createDowncall("CreatePipeRequest", true);
        try
        {
            OB::OutputStreamImpl* _ob_out = _OB_preMarshal(_ob_down);
            try
            {
                _ob_a0._OB_marshal(_ob_out);
                _ob_a1._OB_marshal(_ob_out);
            }
            catch(const ::CORBA::SystemException& _ob_ex)
            {
                _OB_marshalEx(_ob_down, _ob_ex);
            }
            _OB_postMarshal(_ob_down);
            _OB_request(_ob_down);
            bool _ob_uex;
            OB::InputStreamImpl* _ob_in = _OB_preUnmarshal(_ob_down, _ob_uex);
            if(_ob_uex)
            {
                _OB_postUnmarshal(_ob_down);
            }
            else
            {
                ::CORBA::Boolean _ob_r;
                try
                {
                    _ob_r = _ob_in -> read_boolean();
                }
                catch(const ::CORBA::SystemException& _ob_ex)
                {
                    _OB_unmarshalEx(_ob_down, _ob_ex);
                }
                _OB_postUnmarshal(_ob_down);
                return _ob_r;
            }
        }
        catch(const OB::FailureException& _ob_ex)
        {
            _OB_handleFailureException(_ob_down, _ob_ex);
        }
    }
}
