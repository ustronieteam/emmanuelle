// **********************************************************************
//
// Generated by the ORBacus IDL-to-C++ Translator
//
// Copyright (c) 2005
// IONA Technologies, Inc.
// Waltham, MA, USA
//
// All Rights Reserved
//
// **********************************************************************

// Version: 4.3.3

#include <OB/CORBAServer.h>
#include <IServerServer_skel.h>

#ifndef OB_INTEGER_VERSION
#   error No ORBacus version defined! Is <OB/CORBA.h> included?
#endif

#ifndef OB_NO_VERSION_CHECK
#   if (OB_INTEGER_VERSION != 4030300L)
#       error ORBacus version mismatch!
#   endif
#endif

//
// IDL:IServerServer/Join:1.0
//
void
POA_IServerServer::_OB_op_Join(OB::Upcall_ptr _ob_up)
{
    ::DomainData::Address _ob_a0;
    OB::InputStreamImpl* _ob_in = _OB_preUnmarshal(_ob_up);
    ::DomainData::Address::_OB_unmarshal(_ob_a0, _ob_in);
    _OB_postUnmarshal(_ob_up);
    ::AddressesList_var _ob_r = Join(_ob_a0);
    _OB_postinvoke(_ob_up);
    OB::OutputStreamImpl* _ob_out = _OB_preMarshal(_ob_up);
    ::CORBA::ULong _ob_len0 = _ob_r.in().length();
    _ob_out -> write_ulong(_ob_len0);
    ::DomainData::Address const * _ob_buf0 = _ob_r.in().get_buffer();
    for(::CORBA::ULong _ob_i0 = 0 ; _ob_i0 < _ob_len0 ; _ob_i0++)
    {
        _ob_buf0[_ob_i0]._OB_marshal(_ob_out);
    }
    _OB_postMarshal(_ob_up);
}

//
// IDL:IServerServer/Unjoin:1.0
//
void
POA_IServerServer::_OB_op_Unjoin(OB::Upcall_ptr _ob_up)
{
    _OB_preUnmarshal(_ob_up);
    _OB_postUnmarshal(_ob_up);
    Unjoin();
    _OB_postinvoke(_ob_up);
    _OB_preMarshal(_ob_up);
    _OB_postMarshal(_ob_up);
}

//
// IDL:IServerServer/AddServer:1.0
//
void
POA_IServerServer::_OB_op_AddServer(OB::Upcall_ptr _ob_up)
{
    ::DomainData::Address _ob_a0;
    OB::InputStreamImpl* _ob_in = _OB_preUnmarshal(_ob_up);
    ::DomainData::Address::_OB_unmarshal(_ob_a0, _ob_in);
    _OB_postUnmarshal(_ob_up);
    AddServer(_ob_a0);
    _OB_postinvoke(_ob_up);
    _OB_preMarshal(_ob_up);
    _OB_postMarshal(_ob_up);
}

//
// IDL:IServerServer/RemoveServer:1.0
//
void
POA_IServerServer::_OB_op_RemoveServer(OB::Upcall_ptr _ob_up)
{
    ::DomainData::Address _ob_a0;
    OB::InputStreamImpl* _ob_in = _OB_preUnmarshal(_ob_up);
    ::DomainData::Address::_OB_unmarshal(_ob_a0, _ob_in);
    _OB_postUnmarshal(_ob_up);
    RemoveServer(_ob_a0);
    _OB_postinvoke(_ob_up);
    _OB_preMarshal(_ob_up);
    _OB_postMarshal(_ob_up);
}

//
// IDL:IServerServer/PassMessage:1.0
//
void
POA_IServerServer::_OB_op_PassMessage(OB::Upcall_ptr _ob_up)
{
    ::DomainData::Message _ob_a0;
    ::DomainData::Address _ob_a1;
    ::DomainData::Address _ob_a2;
    OB::InputStreamImpl* _ob_in = _OB_preUnmarshal(_ob_up);
    ::DomainData::Message::_OB_unmarshal(_ob_a0, _ob_in);
    ::DomainData::Address::_OB_unmarshal(_ob_a1, _ob_in);
    ::DomainData::Address::_OB_unmarshal(_ob_a2, _ob_in);
    _OB_postUnmarshal(_ob_up);
    PassMessage(_ob_a0, _ob_a1, _ob_a2);
    _OB_postinvoke(_ob_up);
    _OB_preMarshal(_ob_up);
    _OB_postMarshal(_ob_up);
}

//
// IDL:IServerServer/PassCreatePipeRequest:1.0
//
void
POA_IServerServer::_OB_op_PassCreatePipeRequest(OB::Upcall_ptr _ob_up)
{
    ::DomainData::Address _ob_a0;
    ::DomainData::Address _ob_a1;
    ::DomainData::Address _ob_a2;
    OB::InputStreamImpl* _ob_in = _OB_preUnmarshal(_ob_up);
    ::DomainData::Address::_OB_unmarshal(_ob_a0, _ob_in);
    ::DomainData::Address::_OB_unmarshal(_ob_a1, _ob_in);
    ::DomainData::Address::_OB_unmarshal(_ob_a2, _ob_in);
    _OB_postUnmarshal(_ob_up);
    PassCreatePipeRequest(_ob_a0, _ob_a1, _ob_a2);
    _OB_postinvoke(_ob_up);
    _OB_preMarshal(_ob_up);
    _OB_postMarshal(_ob_up);
}

//
// IDL:IServerServer/ClientStatusChanged:1.0
//
void
POA_IServerServer::_OB_op_ClientStatusChanged(OB::Upcall_ptr _ob_up)
{
    ::DomainData::Address _ob_a0;
    ::DomainData::Enability _ob_a1;
    ::DomainData::User _ob_a2;
    OB::InputStreamImpl* _ob_in = _OB_preUnmarshal(_ob_up);
    ::DomainData::Address::_OB_unmarshal(_ob_a0, _ob_in);
    ::DomainData::Enability::_OB_unmarshal(_ob_a1, _ob_in);
    ::DomainData::User::_OB_unmarshal(_ob_a2, _ob_in);
    _OB_postUnmarshal(_ob_up);
    ClientStatusChanged(_ob_a0, _ob_a1, _ob_a2);
    _OB_postinvoke(_ob_up);
    _OB_preMarshal(_ob_up);
    _OB_postMarshal(_ob_up);
}

//
// IDL:IServerServer:1.0
//
::CORBA::Boolean
POA_IServerServer::_is_a(const char* type)
    throw(::CORBA::SystemException)
{
    const char** _ob_ids = IServerServer::_OB_staticIds();
    for(::CORBA::ULong _ob_i = 0; _ob_ids[_ob_i] != 0; ++_ob_i)
        if(strcmp(type, _ob_ids[_ob_i]) == 0)
            return true;

    return false;
}

::CORBA::RepositoryId
POA_IServerServer::_primary_interface(const PortableServer::ObjectId&,
                                      PortableServer::POA_ptr)
{
    return ::CORBA::string_dup(IServerServer::_OB_staticIds()[0]);
}

IServerServer_ptr
POA_IServerServer::_this()
{
    ::CORBA::Object_var obj = _OB_createReference();
    IServerServer_var result = IServerServer::_narrow(obj);
    return result._retn();
}

OB::DirectStubImpl_ptr
POA_IServerServer::_OB_createDirectStubImpl(PortableServer::POA_ptr poa,
                                            const PortableServer::ObjectId& oid)
{
    return new OBDirectStubImpl_IServerServer(poa, oid, this);
}

void
POA_IServerServer::_OB_dispatch(OB::Upcall_ptr _ob_up)
{
    static const char* _ob_names[] =
    {
        "AddServer",
        "ClientStatusChanged",
        "Join",
        "PassCreatePipeRequest",
        "PassMessage",
        "RemoveServer",
        "Unjoin"
    };
    static const ::CORBA::ULong _ob_numNames = 7;

    switch(_OB_findOperation(_ob_up, _ob_names, _ob_numNames))
    {
    case 0: // AddServer
        _OB_op_AddServer(_ob_up);
        return;

    case 1: // ClientStatusChanged
        _OB_op_ClientStatusChanged(_ob_up);
        return;

    case 2: // Join
        _OB_op_Join(_ob_up);
        return;

    case 3: // PassCreatePipeRequest
        _OB_op_PassCreatePipeRequest(_ob_up);
        return;

    case 4: // PassMessage
        _OB_op_PassMessage(_ob_up);
        return;

    case 5: // RemoveServer
        _OB_op_RemoveServer(_ob_up);
        return;

    case 6: // Unjoin
        _OB_op_Unjoin(_ob_up);
        return;
    }

    _OB_dispatchBase(_ob_up);
}

//
// IDL:IServerServer:1.0
//
OBDirectStubImpl_IServerServer::OBDirectStubImpl_IServerServer(
    PortableServer::POA_ptr poa,
    const PortableServer::ObjectId& oid,
    PortableServer::ServantBase* servant)
#ifdef HAVE_VCPLUSPLUS_BUGS
{
    _ob_initialize(poa, oid, servant);
}
#else
    : OB::DirectStubImpl(poa, oid, servant)
{
}
#endif

//
// IDL:IServerServer/Join:1.0
//
::AddressesList*
OBDirectStubImpl_IServerServer::Join(const ::DomainData::Address& _ob_a0)
{
    OB::InvocationHandler _ob_handler(this, "Join");
    return dynamic_cast<POA_IServerServer*>(_ob_servant_) -> Join(_ob_a0);
}

//
// IDL:IServerServer/Unjoin:1.0
//
void
OBDirectStubImpl_IServerServer::Unjoin()
{
    OB::InvocationHandler _ob_handler(this, "Unjoin");
    dynamic_cast<POA_IServerServer*>(_ob_servant_) -> Unjoin();
}

//
// IDL:IServerServer/AddServer:1.0
//
void
OBDirectStubImpl_IServerServer::AddServer(const ::DomainData::Address& _ob_a0)
{
    OB::InvocationHandler _ob_handler(this, "AddServer");
    dynamic_cast<POA_IServerServer*>(_ob_servant_) -> AddServer(_ob_a0);
}

//
// IDL:IServerServer/RemoveServer:1.0
//
void
OBDirectStubImpl_IServerServer::RemoveServer(const ::DomainData::Address& _ob_a0)
{
    OB::InvocationHandler _ob_handler(this, "RemoveServer");
    dynamic_cast<POA_IServerServer*>(_ob_servant_) -> RemoveServer(_ob_a0);
}

//
// IDL:IServerServer/PassMessage:1.0
//
void
OBDirectStubImpl_IServerServer::PassMessage(const ::DomainData::Message& _ob_a0,
                                            const ::DomainData::Address& _ob_a1,
                                            const ::DomainData::Address& _ob_a2)
{
    OB::InvocationHandler _ob_handler(this, "PassMessage");
    dynamic_cast<POA_IServerServer*>(_ob_servant_) -> PassMessage(_ob_a0, _ob_a1, _ob_a2);
}

//
// IDL:IServerServer/PassCreatePipeRequest:1.0
//
void
OBDirectStubImpl_IServerServer::PassCreatePipeRequest(const ::DomainData::Address& _ob_a0,
                                                      const ::DomainData::Address& _ob_a1,
                                                      const ::DomainData::Address& _ob_a2)
{
    OB::InvocationHandler _ob_handler(this, "PassCreatePipeRequest");
    dynamic_cast<POA_IServerServer*>(_ob_servant_) -> PassCreatePipeRequest(_ob_a0, _ob_a1, _ob_a2);
}

//
// IDL:IServerServer/ClientStatusChanged:1.0
//
void
OBDirectStubImpl_IServerServer::ClientStatusChanged(const ::DomainData::Address& _ob_a0,
                                                    const ::DomainData::Enability& _ob_a1,
                                                    const ::DomainData::User& _ob_a2)
{
    OB::InvocationHandler _ob_handler(this, "ClientStatusChanged");
    dynamic_cast<POA_IServerServer*>(_ob_servant_) -> ClientStatusChanged(_ob_a0, _ob_a1, _ob_a2);
}
