// **********************************************************************
//
// Generated by the ORBacus IDL-to-C++ Translator
//
// Copyright (c) 2005
// IONA Technologies, Inc.
// Waltham, MA, USA
//
// All Rights Reserved
//
// **********************************************************************

// Version: 4.3.3

///
/// @author	Mateusz Ko³odziejczyk
/// @date	06.01.2009
///
/// @brief	Klasa wygenerowana z pliku IDL IClientServer.idl
///

#ifndef ___IClientServer_h__
#define ___IClientServer_h__

#include <DomainData.h>

#ifndef OB_INTEGER_VERSION
#   error No ORBacus version defined! Is <OB/CORBA.h> included?
#endif

#ifndef OB_NO_VERSION_CHECK
#   if (OB_INTEGER_VERSION != 4030300L)
#       error ORBacus version mismatch!
#   endif
#endif

class IClientServer;
typedef IClientServer* IClientServer_ptr;
typedef IClientServer* IClientServerRef;

extern OB::TypeCodeConst _tc_IClientServer;

void OBDuplicate(IClientServer_ptr);
void OBRelease(IClientServer_ptr);

void OBMarshal(IClientServer_ptr, OB::OutputStreamImpl*);
void OBUnmarshal(IClientServer_ptr&, OB::InputStreamImpl*);

typedef OB::ObjVar< IClientServer > IClientServer_var;
typedef OB::ObjOut< IClientServer > IClientServer_out;

class OBStubImpl_IClientServer;
typedef OBStubImpl_IClientServer* OBStubImpl_IClientServer_ptr;

void OBDuplicate(OBStubImpl_IClientServer_ptr);
void OBRelease(OBStubImpl_IClientServer_ptr);

typedef OB::ObjVar< OBStubImpl_IClientServer > OBStubImpl_IClientServer_var;

//
// IDL:IClientServer:1.0
//
class IClientServer : virtual public ::CORBA::Object
{
    IClientServer(const IClientServer&);
    void operator=(const IClientServer&);

protected:

    static const char* ids_[];

public:

    IClientServer() { }
    virtual ~IClientServer() { }

    typedef IClientServer_ptr _ptr_type;
    typedef IClientServer_var _var_type;

    static inline IClientServer_ptr
    _duplicate(IClientServer_ptr p)
    {
        if(p)
            p -> _add_ref();
        return p;
    }

    static inline IClientServer_ptr
    _nil()
    {
        return 0;
    }

    static IClientServer_ptr _narrow(::CORBA::Object_ptr);
    static IClientServer_ptr _unchecked_narrow(::CORBA::Object_ptr);

    static IClientServer_ptr _narrow(::CORBA::AbstractBase_ptr);
    static IClientServer_ptr _unchecked_narrow(::CORBA::AbstractBase_ptr);

    static const char** _OB_staticIds();

    //
    // IDL:IClientServer/ReceiveMessage:1.0
    //
    virtual void ReceiveMessage(const ::DomainData::User& sender,
                                const ::DomainData::Message& msg) = 0;

    //
    // IDL:IClientServer/ChangeServer:1.0
    //
    virtual void ChangeServer(const ::DomainData::Address& serverAddress) = 0;

    //
    // IDL:IClientServer/CreatePipeRequest:1.0
    //
    virtual ::CORBA::Boolean CreatePipeRequest(const ::DomainData::User& sender,
                                               const ::DomainData::User& pipeHolder) = 0;
};

//
// IDL:IClientServer:1.0
//
class OBProxy_IClientServer : virtual public ::IClientServer,
                              virtual public OBCORBA::Object
{
    OBProxy_IClientServer(const OBProxy_IClientServer&);
    void operator=(const OBProxy_IClientServer&);

protected:

    virtual OB::MarshalStubImpl_ptr _OB_createMarshalStubImpl();

public:

    OBProxy_IClientServer() { }
    virtual ~OBProxy_IClientServer() { }

    virtual const char** _OB_ids() const;

    //
    // IDL:IClientServer/ReceiveMessage:1.0
    //
    void ReceiveMessage(const ::DomainData::User& sender,
                        const ::DomainData::Message& msg);

    //
    // IDL:IClientServer/ChangeServer:1.0
    //
    void ChangeServer(const ::DomainData::Address& serverAddress);

    //
    // IDL:IClientServer/CreatePipeRequest:1.0
    //
    ::CORBA::Boolean CreatePipeRequest(const ::DomainData::User& sender,
                                       const ::DomainData::User& pipeHolder);
};

//
// IDL:IClientServer:1.0
//
class OBStubImpl_IClientServer : virtual public OB::StubImplBase
{
    OBStubImpl_IClientServer(const OBStubImpl_IClientServer&);
    void operator=(const OBStubImpl_IClientServer&);

protected:

    OBStubImpl_IClientServer() { }

public:

    static inline OBStubImpl_IClientServer_ptr
    _duplicate(OBStubImpl_IClientServer_ptr p)
    {
        if(p)
            p -> _OB_incRef();
        return p;
    }

    static inline OBStubImpl_IClientServer_ptr
    _nil()
    {
        return 0;
    }

    //
    // IDL:IClientServer/ReceiveMessage:1.0
    //
    virtual void ReceiveMessage(const ::DomainData::User& sender,
                                const ::DomainData::Message& msg) = 0;

    //
    // IDL:IClientServer/ChangeServer:1.0
    //
    virtual void ChangeServer(const ::DomainData::Address& serverAddress) = 0;

    //
    // IDL:IClientServer/CreatePipeRequest:1.0
    //
    virtual ::CORBA::Boolean CreatePipeRequest(const ::DomainData::User& sender,
                                               const ::DomainData::User& pipeHolder) = 0;
};

//
// IDL:IClientServer:1.0
//
class OBMarshalStubImpl_IClientServer : 
    virtual public OBStubImpl_IClientServer,
    virtual public OB::MarshalStubImpl
{
    OBMarshalStubImpl_IClientServer(const OBMarshalStubImpl_IClientServer&);
    void operator=(const OBMarshalStubImpl_IClientServer&);

protected:

    OBMarshalStubImpl_IClientServer() { }
    friend class OBProxy_IClientServer;

public:

    //
    // IDL:IClientServer/ReceiveMessage:1.0
    //
    virtual void ReceiveMessage(const ::DomainData::User& sender,
                                const ::DomainData::Message& msg);

    //
    // IDL:IClientServer/ChangeServer:1.0
    //
    virtual void ChangeServer(const ::DomainData::Address& serverAddress);

    //
    // IDL:IClientServer/CreatePipeRequest:1.0
    //
    virtual ::CORBA::Boolean CreatePipeRequest(const ::DomainData::User& sender,
                                               const ::DomainData::User& pipeHolder);
};

//
// IDL:IClientServer:1.0
//
namespace CORBA
{

inline void
release(::IClientServer_ptr p)
{
    if(p)
        p -> _remove_ref();
}

inline Boolean
is_nil(::IClientServer_ptr p)
{
    return p == 0;
}

inline void
release(OBStubImpl_IClientServer_ptr p)
{
    if(p)
        p -> _OB_decRef();
}

inline Boolean
is_nil(OBStubImpl_IClientServer_ptr p)
{
    return p == 0;
}

} // End of namespace CORBA

void operator<<=(::CORBA::Any&, IClientServer_ptr*);
void operator<<=(::CORBA::Any&, IClientServer_ptr);
CORBA::Boolean operator>>=(const ::CORBA::Any&, IClientServer_ptr&);

inline void
operator<<=(::CORBA::Any_var& any, IClientServer_ptr* val)
{
    any.inout() <<= val;
}

inline void
operator<<=(::CORBA::Any_var& any, IClientServer_ptr val)
{
    any.inout() <<= val;
}

inline CORBA::Boolean
operator>>=(const ::CORBA::Any_var& any, IClientServer_ptr& val)
{
    return any.in() >>= val;
}

#endif
