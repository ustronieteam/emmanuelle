// **********************************************************************
//
// Generated by the ORBacus IDL-to-C++ Translator
//
// Copyright (c) 2005
// IONA Technologies, Inc.
// Waltham, MA, USA
//
// All Rights Reserved
//
// **********************************************************************

// Version: 4.3.3

#include <OB/CORBAServer.h>
#include <ClientInterfaces_skel.h>

#ifndef OB_INTEGER_VERSION
#   error No ORBacus version defined! Is <OB/CORBA.h> included?
#endif

#ifndef OB_NO_VERSION_CHECK
#   if (OB_INTEGER_VERSION != 4030300L)
#       error ORBacus version mismatch!
#   endif
#endif

//
// IDL:DomainData:1.0
//

//
// IDL:ClientInterfaces:1.0
//

//
// IDL:ClientInterfaces/IClientServer/ReceiveMessage:1.0
//
void
POA_ClientInterfaces::IClientServer::_OB_op_ReceiveMessage(OB::Upcall_ptr _ob_up)
{
    ::DomainData::Address _ob_a0;
    ::DomainData::Message _ob_a1;
    OB::InputStreamImpl* _ob_in = _OB_preUnmarshal(_ob_up);
    ::DomainData::Address::_OB_unmarshal(_ob_a0, _ob_in);
    ::DomainData::Message::_OB_unmarshal(_ob_a1, _ob_in);
    _OB_postUnmarshal(_ob_up);
    ReceiveMessage(_ob_a0, _ob_a1);
    _OB_postinvoke(_ob_up);
    _OB_preMarshal(_ob_up);
    _OB_postMarshal(_ob_up);
}

//
// IDL:ClientInterfaces/IClientServer/ChangeServer:1.0
//
void
POA_ClientInterfaces::IClientServer::_OB_op_ChangeServer(OB::Upcall_ptr _ob_up)
{
    ::DomainData::Address _ob_a0;
    OB::InputStreamImpl* _ob_in = _OB_preUnmarshal(_ob_up);
    ::DomainData::Address::_OB_unmarshal(_ob_a0, _ob_in);
    _OB_postUnmarshal(_ob_up);
    ChangeServer(_ob_a0);
    _OB_postinvoke(_ob_up);
    _OB_preMarshal(_ob_up);
    _OB_postMarshal(_ob_up);
}

//
// IDL:ClientInterfaces/IClientServer/CreatePipeRequest:1.0
//
void
POA_ClientInterfaces::IClientServer::_OB_op_CreatePipeRequest(OB::Upcall_ptr _ob_up)
{
    ::DomainData::Address _ob_a0;
    ::DomainData::Address _ob_a1;
    OB::InputStreamImpl* _ob_in = _OB_preUnmarshal(_ob_up);
    ::DomainData::Address::_OB_unmarshal(_ob_a0, _ob_in);
    ::DomainData::Address::_OB_unmarshal(_ob_a1, _ob_in);
    _OB_postUnmarshal(_ob_up);
    ::CORBA::Boolean _ob_r = CreatePipeRequest(_ob_a0, _ob_a1);
    _OB_postinvoke(_ob_up);
    OB::OutputStreamImpl* _ob_out = _OB_preMarshal(_ob_up);
    _ob_out -> write_boolean(_ob_r);
    _OB_postMarshal(_ob_up);
}

//
// IDL:ClientInterfaces/IClientServer:1.0
//
::CORBA::Boolean
POA_ClientInterfaces::IClientServer::_is_a(const char* type)
    throw(::CORBA::SystemException)
{
    const char** _ob_ids = ClientInterfaces::IClientServer::_OB_staticIds();
    for(::CORBA::ULong _ob_i = 0; _ob_ids[_ob_i] != 0; ++_ob_i)
        if(strcmp(type, _ob_ids[_ob_i]) == 0)
            return true;

    return false;
}

::CORBA::RepositoryId
POA_ClientInterfaces::IClientServer::_primary_interface(const PortableServer::ObjectId&,
                                                        PortableServer::POA_ptr)
{
    return ::CORBA::string_dup(ClientInterfaces::IClientServer::_OB_staticIds()[0]);
}

ClientInterfaces::IClientServer_ptr
POA_ClientInterfaces::IClientServer::_this()
{
    ::CORBA::Object_var obj = _OB_createReference();
    ClientInterfaces::IClientServer_var result = ClientInterfaces::IClientServer::_narrow(obj);
    return result._retn();
}

OB::DirectStubImpl_ptr
POA_ClientInterfaces::IClientServer::_OB_createDirectStubImpl(PortableServer::POA_ptr poa,
                                                              const PortableServer::ObjectId& oid)
{
    return new OBDirectStubImpl_ClientInterfaces::IClientServer(poa, oid, this);
}

void
POA_ClientInterfaces::IClientServer::_OB_dispatch(OB::Upcall_ptr _ob_up)
{
    static const char* _ob_names[] =
    {
        "ChangeServer",
        "CreatePipeRequest",
        "ReceiveMessage"
    };
    static const ::CORBA::ULong _ob_numNames = 3;

    switch(_OB_findOperation(_ob_up, _ob_names, _ob_numNames))
    {
    case 0: // ChangeServer
        _OB_op_ChangeServer(_ob_up);
        return;

    case 1: // CreatePipeRequest
        _OB_op_CreatePipeRequest(_ob_up);
        return;

    case 2: // ReceiveMessage
        _OB_op_ReceiveMessage(_ob_up);
        return;
    }

    _OB_dispatchBase(_ob_up);
}

//
// IDL:ClientInterfaces/IClientClient/SendFile:1.0
//
void
POA_ClientInterfaces::IClientClient::_OB_op_SendFile(OB::Upcall_ptr _ob_up)
{
    ::DomainData::File _ob_a0;
    ::DomainData::Address _ob_a1;
    OB::InputStreamImpl* _ob_in = _OB_preUnmarshal(_ob_up);
    ::DomainData::File::_OB_unmarshal(_ob_a0, _ob_in);
    ::DomainData::Address::_OB_unmarshal(_ob_a1, _ob_in);
    _OB_postUnmarshal(_ob_up);
    SendFile(_ob_a0, _ob_a1);
    _OB_postinvoke(_ob_up);
    _OB_preMarshal(_ob_up);
    _OB_postMarshal(_ob_up);
}

//
// IDL:ClientInterfaces/IClientClient/CreatePipe:1.0
//
void
POA_ClientInterfaces::IClientClient::_OB_op_CreatePipe(OB::Upcall_ptr _ob_up)
{
    _OB_preUnmarshal(_ob_up);
    _OB_postUnmarshal(_ob_up);
    CreatePipe();
    _OB_postinvoke(_ob_up);
    _OB_preMarshal(_ob_up);
    _OB_postMarshal(_ob_up);
}

//
// IDL:ClientInterfaces/IClientClient/GetFile:1.0
//
void
POA_ClientInterfaces::IClientClient::_OB_op_GetFile(OB::Upcall_ptr _ob_up)
{
    ::DomainData::Address _ob_a0;
    OB::InputStreamImpl* _ob_in = _OB_preUnmarshal(_ob_up);
    ::DomainData::Address::_OB_unmarshal(_ob_a0, _ob_in);
    _OB_postUnmarshal(_ob_up);
    ::DomainData::File_var _ob_r = GetFile(_ob_a0);
    _OB_postinvoke(_ob_up);
    OB::OutputStreamImpl* _ob_out = _OB_preMarshal(_ob_up);
    _ob_r.in()._OB_marshal(_ob_out);
    _OB_postMarshal(_ob_up);
}

//
// IDL:ClientInterfaces/IClientClient:1.0
//
::CORBA::Boolean
POA_ClientInterfaces::IClientClient::_is_a(const char* type)
    throw(::CORBA::SystemException)
{
    const char** _ob_ids = ClientInterfaces::IClientClient::_OB_staticIds();
    for(::CORBA::ULong _ob_i = 0; _ob_ids[_ob_i] != 0; ++_ob_i)
        if(strcmp(type, _ob_ids[_ob_i]) == 0)
            return true;

    return false;
}

::CORBA::RepositoryId
POA_ClientInterfaces::IClientClient::_primary_interface(const PortableServer::ObjectId&,
                                                        PortableServer::POA_ptr)
{
    return ::CORBA::string_dup(ClientInterfaces::IClientClient::_OB_staticIds()[0]);
}

ClientInterfaces::IClientClient_ptr
POA_ClientInterfaces::IClientClient::_this()
{
    ::CORBA::Object_var obj = _OB_createReference();
    ClientInterfaces::IClientClient_var result = ClientInterfaces::IClientClient::_narrow(obj);
    return result._retn();
}

OB::DirectStubImpl_ptr
POA_ClientInterfaces::IClientClient::_OB_createDirectStubImpl(PortableServer::POA_ptr poa,
                                                              const PortableServer::ObjectId& oid)
{
    return new OBDirectStubImpl_ClientInterfaces::IClientClient(poa, oid, this);
}

void
POA_ClientInterfaces::IClientClient::_OB_dispatch(OB::Upcall_ptr _ob_up)
{
    static const char* _ob_names[] =
    {
        "CreatePipe",
        "GetFile",
        "SendFile"
    };
    static const ::CORBA::ULong _ob_numNames = 3;

    switch(_OB_findOperation(_ob_up, _ob_names, _ob_numNames))
    {
    case 0: // CreatePipe
        _OB_op_CreatePipe(_ob_up);
        return;

    case 1: // GetFile
        _OB_op_GetFile(_ob_up);
        return;

    case 2: // SendFile
        _OB_op_SendFile(_ob_up);
        return;
    }

    _OB_dispatchBase(_ob_up);
}

//
// IDL:ClientInterfaces/IClientServer:1.0
//
OBDirectStubImpl_ClientInterfaces::IClientServer::IClientServer(
    PortableServer::POA_ptr poa,
    const PortableServer::ObjectId& oid,
    PortableServer::ServantBase* servant)
#ifdef HAVE_VCPLUSPLUS_BUGS
{
    _ob_initialize(poa, oid, servant);
}
#else
    : OB::DirectStubImpl(poa, oid, servant)
{
}
#endif

//
// IDL:ClientInterfaces/IClientServer/ReceiveMessage:1.0
//
void
OBDirectStubImpl_ClientInterfaces::IClientServer::ReceiveMessage(const ::DomainData::Address& _ob_a0,
                                                                 const ::DomainData::Message& _ob_a1)
{
    OB::InvocationHandler _ob_handler(this, "ReceiveMessage");
    dynamic_cast<POA_ClientInterfaces::IClientServer*>(_ob_servant_) -> ReceiveMessage(_ob_a0, _ob_a1);
}

//
// IDL:ClientInterfaces/IClientServer/ChangeServer:1.0
//
void
OBDirectStubImpl_ClientInterfaces::IClientServer::ChangeServer(const ::DomainData::Address& _ob_a0)
{
    OB::InvocationHandler _ob_handler(this, "ChangeServer");
    dynamic_cast<POA_ClientInterfaces::IClientServer*>(_ob_servant_) -> ChangeServer(_ob_a0);
}

//
// IDL:ClientInterfaces/IClientServer/CreatePipeRequest:1.0
//
::CORBA::Boolean
OBDirectStubImpl_ClientInterfaces::IClientServer::CreatePipeRequest(const ::DomainData::Address& _ob_a0,
                                                                    const ::DomainData::Address& _ob_a1)
{
    OB::InvocationHandler _ob_handler(this, "CreatePipeRequest");
    return dynamic_cast<POA_ClientInterfaces::IClientServer*>(_ob_servant_) -> CreatePipeRequest(_ob_a0, _ob_a1);
}

//
// IDL:ClientInterfaces/IClientClient:1.0
//
OBDirectStubImpl_ClientInterfaces::IClientClient::IClientClient(
    PortableServer::POA_ptr poa,
    const PortableServer::ObjectId& oid,
    PortableServer::ServantBase* servant)
#ifdef HAVE_VCPLUSPLUS_BUGS
{
    _ob_initialize(poa, oid, servant);
}
#else
    : OB::DirectStubImpl(poa, oid, servant)
{
}
#endif

//
// IDL:ClientInterfaces/IClientClient/SendFile:1.0
//
void
OBDirectStubImpl_ClientInterfaces::IClientClient::SendFile(const ::DomainData::File& _ob_a0,
                                                           const ::DomainData::Address& _ob_a1)
{
    OB::InvocationHandler _ob_handler(this, "SendFile");
    dynamic_cast<POA_ClientInterfaces::IClientClient*>(_ob_servant_) -> SendFile(_ob_a0, _ob_a1);
}

//
// IDL:ClientInterfaces/IClientClient/CreatePipe:1.0
//
void
OBDirectStubImpl_ClientInterfaces::IClientClient::CreatePipe()
{
    OB::InvocationHandler _ob_handler(this, "CreatePipe");
    dynamic_cast<POA_ClientInterfaces::IClientClient*>(_ob_servant_) -> CreatePipe();
}

//
// IDL:ClientInterfaces/IClientClient/GetFile:1.0
//
::DomainData::File*
OBDirectStubImpl_ClientInterfaces::IClientClient::GetFile(const ::DomainData::Address& _ob_a0)
{
    OB::InvocationHandler _ob_handler(this, "GetFile");
    return dynamic_cast<POA_ClientInterfaces::IClientClient*>(_ob_servant_) -> GetFile(_ob_a0);
}
